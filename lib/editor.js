// Generated by CoffeeScript 1.3.3
(function() {
  var Editor,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Editor = (function() {

    Editor.prototype.measurements = {
      toolbar: {
        height: 0
      }
    };

    Editor.prototype.timer = false;

    Editor.prototype.editableSection = null;

    Editor.prototype.allowDelete = true;

    Editor.prototype.document = document;

    function Editor(el) {
      this.onDrop = __bind(this.onDrop, this);

      this.checkNewNode = __bind(this.checkNewNode, this);

      this.ensureNewBlockIsParagraph = __bind(this.ensureNewBlockIsParagraph, this);

      this.onToolbarAction = __bind(this.onToolbarAction, this);

      this.onToolbarOut = __bind(this.onToolbarOut, this);

      this.onToolbarOver = __bind(this.onToolbarOver, this);

      this.clearSectionHover = __bind(this.clearSectionHover, this);

      this.onSectionOut = __bind(this.onSectionOut, this);

      this.onSectionOver = __bind(this.onSectionOver, this);

      this.onKeyUp = __bind(this.onKeyUp, this);

      this.onKeyDown = __bind(this.onKeyDown, this);
      this.el = el;
      this.setup();
      this.bindEvents();
    }

    Editor.prototype.setup = function() {
      this.container = $('<div class="editor-container" />');
      this.toolbar = $("      <span class='editor-toolbar'>        <a href='#' data-command='formatBlock' data-value='h1'>H1</a>        <a href='#' data-command='formatBlock' data-value='h2'>H2</a>        <a href='#' data-command='formatBlock' data-value='h3'>H3</a>        <a href='#' data-command='insertList' data-value='ul'>UL</a>        <a href='#' data-command='insertList' data-value='ol'>OL</a>        <a href='#' data-command='formatBlock' data-value='p'>P</a>        <a href='#' data-command='formatInline' data-value='bold'>B</a>        <a href='#' data-command='formatBlock' data-value='p' data-append='img.right'>P+IMG</a>        <a href='#' data-command='formatBlock' data-value='pre'>Code</a>      </span>    ");
      this.el.wrap(this.container);
      this.toolbar.insertAfter(this.el);
      this.measurements.toolbar.height = this.toolbar.height();
      return this.el.attr('contenteditable', true);
    };

    Editor.prototype.bindEvents = function() {
      this.el.on('keydown', this.onKeyDown);
      this.el.on('keyup', this.onKeyUp);
      this.el.delegate('.editor-section', 'mouseover', this.onSectionOver);
      this.el.delegate('.editor-section', 'mouseout', this.onSectionOut);
      this.toolbar.delegate('a[data-command]', 'click', this.onToolbarAction);
      this.toolbar.on('mouseover', this.onToolbarOver);
      this.toolbar.on('mouseout', this.onToolbarOut);
      this.el.delegate('.img-box', 'dragenter.dropImage', this.noOpEvent);
      this.el.delegate('.img-box', 'dragexit.dropImage', this.noOpEvent);
      this.el.delegate('.img-box', 'dragover.dropImage', this.noOpEvent);
      return this.el.delegate('.img-box', 'drop.dropImage', this.onDrop);
    };

    Editor.prototype.onKeyDown = function(e) {
      if (e.which <= 90 && e.which >= 48) {
        this.allowDelete = true;
      }
      if (e.keyCode === 13 && !e.metaKey && !e.ctrlKey) {
        setTimeout(this.ensureNewBlockIsParagraph, 1, e);
      }
      if (e.keyCode === 9) {
        this.addNestedList();
        e.preventDefault();
      }
      if (e.keyCode === 8) {
        if (!this.allowDelete) {
          e.preventDefault();
        }
      }
      return true;
    };

    Editor.prototype.onKeyUp = function(e) {
      if (e.keyCode === 8) {
        return this.allowDelete = this.safeDeletion();
      }
    };

    Editor.prototype.onSectionOver = function(e) {
      var pos;
      this.clearSectionHover(false);
      this.editableSection = $(e.target);
      if (!this.editableSection.hasClass('editor-section')) {
        this.editableSection = this.editableSection.parents('.editor-section');
      }
      pos = this.editableSection.position();
      return this.toolbar.css({
        top: pos.top - this.measurements.toolbar.height / 2
      });
    };

    Editor.prototype.onSectionOut = function(e) {
      if (this.timer) {
        clearTimeout(this.timer);
      }
      return this.timer = setTimeout(this.clearSectionHover, 400, true);
    };

    Editor.prototype.clearSectionHover = function(hide) {
      if (this.timer) {
        clearTimeout(this.timer);
      }
      this.timer = false;
      this.editableSection = null;
      if (hide) {
        return this.toolbar.css({
          top: -300
        });
      }
    };

    Editor.prototype.onToolbarOver = function(e) {
      if (this.timer) {
        return clearTimeout(this.timer);
      }
    };

    Editor.prototype.onToolbarOut = function(e) {
      return this.onSectionOut();
    };

    Editor.prototype.onToolbarAction = function(e) {
      var append, arg, command, tgt;
      e.stopPropagation();
      e.preventDefault();
      tgt = $(e.target);
      command = tgt.data('command');
      arg = tgt.data('value');
      append = tgt.data('append') || null;
      switch (command) {
        case 'formatBlock':
          return this.formatBlock(arg, append);
        case 'insertList':
          return this.insertList(arg);
        case 'formatInline':
          return this.formatInline(arg);
      }
    };

    Editor.prototype.formatBlock = function(tag, append) {
      var el, html, newBlock, node;
      if (append == null) {
        append = null;
      }
      node = this.editableSection.get(0);
      this.editableSection.find('.img-box').each(function(i, el) {
        return $(el).remove();
      });
      if (node.tagName.toLowerCase() === tag) {
        el = this.editableSection;
      } else {
        this.focusCaretOnNode(node);
        html = this.editableSection.text();
        newBlock = $("<" + tag + " class='editor-section' />").html(html);
        this.editableSection.replaceWith(newBlock);
        this.editableSection = newBlock;
        this.focusCaretOnNode(newBlock.get(0));
      }
      if (append !== null) {
        return this.appendToBlock(el, append);
      }
    };

    Editor.prototype.appendToBlock = function(el, append) {
      var a, arg, parts, tag;
      parts = append.split('.');
      tag = parts[0];
      arg = parts[1];
      if (tag === 'img') {
        a = $("<span class='img-box float-" + arg + "'></span>");
        return el.prepend(a);
      }
    };

    Editor.prototype.formatInline = function(arg) {
      var t;
      t = this.getSelectedText();
      if (t.length !== 0) {
        return document.execCommand(arg);
      }
    };

    Editor.prototype.insertList = function(tag) {
      var c, html, li, newNode;
      c = this.editableSection.find(':first-child');
      if (c && (c.prop('tagName') === 'UL' || c.prop('tagName') === 'OL')) {
        html = c.html();
      } else {
        html = "<li>" + (this.editableSection.html()) + "</li>";
      }
      newNode = $("<div class='editor-section'><" + tag + ">" + html + "</" + tag + "></div>");
      this.editableSection.replaceWith(newNode);
      li = newNode.find('li');
      this.focusCaretOnNode(li.get(0));
      return this.editableSection = newNode;
    };

    Editor.prototype.focusCaretOnNode = function(node) {
      var range;
      range = rangy.createRange();
      range.setStart(node, 0);
      range.setEnd(node, 1);
      range.collapse(false);
      return rangy.getSelection().addRange(range);
    };

    Editor.prototype.ensureNewBlockIsParagraph = function(e) {
      var n, newP, node, parentIsEditor, parentIsSection, possibleParent, range, selection;
      selection = rangy.getSelection();
      range = selection.getRangeAt(0);
      node = range.commonAncestorContainer;
      if (node.nodeName.toLowerCase() !== 'p') {
        possibleParent = $(node.parentNode);
        parentIsEditor = possibleParent.get(0) === this.el.get(0);
        parentIsSection = possibleParent.hasClass('editor-section');
        if (parentIsEditor || parentIsSection) {
          n = $(node);
          newP = $('<p class="editor-section">&nbsp;</p>');
          n.replaceWith(newP);
          if (parentIsSection) {
            newP.insertAfter(possibleParent);
          }
          this.focusCaretOnNode(newP.get(0));
          return newP.html('');
        }
      }
    };

    Editor.prototype.checkNewNode = function() {
      var div, newNode, pn, range, selection;
      selection = rangy.getSelection();
      range = selection.getRangeAt(0);
      pn = $(range.commonAncestorContainer);
      if (pn.prop('tagName') === 'DIV') {
        div = pn.parents('.editor-section');
        newNode = $('<p class="editor-section"></p>').html(pn.html());
        div.after(newNode);
        pn.remove();
        selection = rangy.getSelection();
        range = selection.getRangeAt(0);
        range.collapse(false);
        range = range.cloneRange();
        range.setStart(newNode.get(0), 0);
        range.setEnd(newNode.get(0), 1);
        selection.removeAllRanges();
        return selection.addRange(range);
      }
    };

    Editor.prototype.addNestedList = function() {
      var pn, range, selection;
      selection = rangy.getSelection();
      range = selection.getRangeAt(0);
      pn = $(range.commonAncestorContainer);
      if (pn.prop('tagName') !== 'LI') {
        pn = pn.parents('li');
      }
      if (pn.prop('tagName') === 'LI') {
        return document.execCommand('Indent');
      }
    };

    Editor.prototype.safeDeletion = function() {
      var children, hasContent, html, newNode, pn, range, selection;
      selection = rangy.getSelection();
      range = selection.getRangeAt(0);
      pn = $(range.commonAncestorContainer.parentNode);
      if (!pn.hasClass('editor-section')) {
        pn = pn.parents('.editor-section');
      }
      html = pn.html();
      hasContent = (html != null ? html.trim().length : void 0) > 0 || false;
      children = this.el.children().length;
      if (children === 0) {
        newNode = $('<p class="editor-section">&nbsp;</p>');
        newNode.appendTo(this.el);
        selection = rangy.getSelection();
        range = selection.getRangeAt(0);
        range.setStart(newNode.get(0), 0);
        range.setEnd(newNode.get(0), 1);
        selection.removeAllRanges();
        selection.addRange(range);
      }
      return children > 1 || hasContent;
    };

    Editor.prototype.noOpEvent = function(e) {
      e.stopPropagation();
      return e.preventDefault();
    };

    Editor.prototype.onDrop = function(e) {
      var box, files, reader,
        _this = this;
      e.stopPropagation();
      e.preventDefault();
      box = $(e.target);
      if (!box.hasClass('img-box')) {
        box = box.parents('.img-box');
      }
      files = e.originalEvent.dataTransfer.files;
      if (files.length > 0) {
        reader = new FileReader();
        reader.onload = function(evt) {
          var dataURI;
          dataURI = evt.target.result;
          return box.html('<img src="' + dataURI + '" />');
        };
        return reader.readAsDataURL(files[0]);
      }
    };

    Editor.prototype.getSelectedText = function() {
      if (typeof document !== "undefined" && document !== null ? document.selection : void 0) {
        return document.selection.createRange().text;
      } else {
        return document.getSelection().toString();
      }
    };

    Editor.prototype.log = function() {
      return typeof console !== "undefined" && console !== null ? console.log.apply(console, arguments) : void 0;
    };

    return Editor;

  })();

  window.Editor = Editor;

}).call(this);
